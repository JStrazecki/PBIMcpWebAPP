<!-- API-level policy for Power BI MCP API -->
<policies>
    <inbound>
        <!-- CORS policy for Claude.ai integration -->
        <cors allow-credentials="true">
            <allowed-origins>
                <origin>https://claude.ai</origin>
                <origin>https://api.claude.ai</origin>
                <origin>*</origin> <!-- Remove in production, add specific origins -->
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>OPTIONS</method>
            </allowed-methods>
            <allowed-headers>
                <header>*</header>
            </allowed-headers>
        </cors>

        <!-- Rate limiting -->
        <rate-limit calls="100" renewal-period="60" />
        <quota calls="10000" renewal-period="86400" />

        <!-- JWT token validation for secured endpoints -->
        <choose>
            <when condition="@(context.Request.Url.Path.Contains("/health"))">
                <!-- Health endpoint - no auth required -->
            </when>
            <otherwise>
                <!-- Validate JWT token from Azure AD -->
                <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Unauthorized. Valid JWT token required.">
                    <openid-config url="https://login.microsoftonline.com/{{powerbi-tenant-id}}/v2.0/.well-known/openid-configuration" />
                    <audiences>
                        <audience>{{powerbi-client-id}}</audience>
                        <audience>api://{{powerbi-client-id}}</audience>
                    </audiences>
                    <required-claims>
                        <claim name="scp" match="any">
                            <value>https://analysis.windows.net/powerbi/api/.default</value>
                        </claim>
                    </required-claims>
                </validate-jwt>
            </otherwise>
        </choose>

        <!-- Set backend service -->
        <set-backend-service base-url="https://pbimcp.azurewebsites.net" />

        <!-- Add correlation ID for tracing -->
        <set-variable name="correlation-id" value="@(Guid.NewGuid().ToString())" />
        <set-header name="X-Correlation-ID" exists-action="override">
            <value>@((string)context.Variables["correlation-id"])</value>
        </set-header>

        <!-- Log request -->
        <log-to-eventhub logger-id="apim-logger" partition-id="0">
            @{
                return new {
                    timestamp = DateTime.UtcNow,
                    correlationId = context.Variables["correlation-id"],
                    operation = context.Operation.Name,
                    method = context.Request.Method,
                    url = context.Request.Url.ToString(),
                    userAgent = context.Request.Headers.GetValueOrDefault("User-Agent", ""),
                    clientIP = context.Request.IpAddress
                };
            }
        </log-to-eventhub>
    </inbound>

    <backend>
        <!-- Forward to backend with timeout -->
        <forward-request timeout="120" />
    </backend>

    <outbound>
        <!-- Add security headers -->
        <set-header name="X-Content-Type-Options" exists-action="override">
            <value>nosniff</value>
        </set-header>
        <set-header name="X-Frame-Options" exists-action="override">
            <value>DENY</value>
        </set-header>
        <set-header name="X-XSS-Protection" exists-action="override">
            <value>1; mode=block</value>
        </set-header>
        <set-header name="Strict-Transport-Security" exists-action="override">
            <value>max-age=31536000; includeSubDomains</value>
        </set-header>

        <!-- Remove server information -->
        <set-header name="Server" exists-action="delete" />
        <set-header name="X-Powered-By" exists-action="delete" />

        <!-- Add correlation ID to response -->
        <set-header name="X-Correlation-ID" exists-action="override">
            <value>@((string)context.Variables["correlation-id"])</value>
        </set-header>

        <!-- Log response -->
        <log-to-eventhub logger-id="apim-logger" partition-id="0">
            @{
                return new {
                    timestamp = DateTime.UtcNow,
                    correlationId = context.Variables["correlation-id"],
                    operation = context.Operation.Name,
                    statusCode = context.Response.StatusCode,
                    responseTime = context.Elapsed.TotalMilliseconds
                };
            }
        </log-to-eventhub>
    </outbound>

    <on-error>
        <!-- Error handling -->
        <set-header name="X-Error-Correlation-ID" exists-action="override">
            <value>@((string)context.Variables["correlation-id"])</value>
        </set-header>

        <!-- Log error -->
        <log-to-eventhub logger-id="apim-logger" partition-id="0">
            @{
                return new {
                    timestamp = DateTime.UtcNow,
                    correlationId = context.Variables["correlation-id"],
                    operation = context.Operation.Name,
                    error = context.LastError?.Message,
                    statusCode = context.Response.StatusCode
                };
            }
        </log-to-eventhub>

        <!-- Return structured error response -->
        <return-response>
            <set-status code="@(context.Response.StatusCode)" reason="@(context.Response.StatusReason)" />
            <set-header name="Content-Type" exists-action="override">
                <value>application/json</value>
            </set-header>
            <set-body>@{
                return new JObject(
                    new JProperty("error", new JObject(
                        new JProperty("code", context.Response.StatusCode),
                        new JProperty("message", context.LastError?.Message ?? "An error occurred"),
                        new JProperty("correlationId", context.Variables["correlation-id"]),
                        new JProperty("timestamp", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.fffZ"))
                    ))
                ).ToString();
            }</set-body>
        </return-response>
    </on-error>
</policies>